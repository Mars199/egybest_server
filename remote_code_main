def _setDriverOptions(self):
    global BROWSER
        
    self.lblStartup.setText('Getting Egy.best Static IP...')
    pgbar(self.pgbar, 0, 10, self.run)
    
    try:
        options = webdriver.ChromeOptions()
        
        # v1.6
        # more stable chrome driver settings
        ####
        chrome_prefs = {}
        chrome_prefs["profile.managed_default_content_settings.images"] = 2
        chrome_prefs["profile.default_content_settings.images"] = 2
        chrome_prefs["download.download_restrictions"] = 3
        chrome_prefs["download.prompt_for_download"] = False
        chrome_prefs["download.default_directory"] = "NUL"
        
        options.add_experimental_option("prefs", chrome_prefs)
        
        options.add_argument('--incognito')
        options.add_argument('--headless')
        options.add_argument('--log-level=OFF')
        
        options.add_experimental_option('excludeSwitches', ['enable-logging'])
        ####
        
        BROWSER = webdriver.Chrome(options=options)

        # get working url when egy.best is down
        server_url = requests.get('').text[:-1]

        self.lblStartup.setText('Testing Egybest connection...'); self.run()
        pgbar(self.pgbar, 10, 23, self.run)
        if requests.head(server_url).status_code != 200:
            self.error('Egy.best is down\n Use VPN or try again later.\n')
            return

        self.base_url = server_url[:-1] if server_url[-1] == '/' else server_url
    except:
        self.error()

def close_ads(browser):
    time.sleep(3)
    try:
        for x in reversed(range(1, len(browser.window_handles))):
            browser.switch_to.window(browser.window_handles[x])
            browser.close()
    except:
        pass
    browser.switch_to.window(browser.window_handles[0])

def VerifyCV(base_url, media_url, run, browser, quality, pgbr):
    # Clicking on desired quality
    browser.get(media_url)
    
    pgbr(10); run()
    elem = browser.find_element_by_xpath('//table[contains(@class, "dls_table")]//tr[td//text()[contains(., "{}p")]]//a[1]'.format(quality))
    browser.get(base_url + elem.get_attribute('data-url'))

    # Access vidstream
    WebDriverWait(browser, 15).until(lambda x: 'vidstream' in browser.title.lower())

    # Click on vidstream button and close ads
    browser.find_element_by_xpath('//*[contains(text(), "Download")]').click()

    pgbr(40); run()
    close_ads(browser)
    pgbr(80); run()

    # Get url
    elem = WebDriverWait(browser, 10).until(
            EC.presence_of_element_located(
            (By.XPATH, '//*[contains(text(), "Download")][@href]')
            ))
    pgbr(90); run()
    url = elem.get_attribute('href')
    pgbr(100); run()

    return url, url.replace('/dl/', '/watch/')
