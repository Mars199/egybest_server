def get_poster(html):
    # 15-12-2020
    # Hotfix: Posters not showing (https:) added twice
    img_url = html_find(html)('img')['src']
    img_url = img_url.replace('https://', '').replace('http://', '')
    return 'https://' + img_url

def get_details(html):
    det = html_find_all(html)('div', {'class':'pda'})[3].text
    
    # Process new lines for html
    det = det.replace('\n', '<br>')
    
    # Split English from arabic
    ar, en = [], []
    for n in map(ord, det):
        [en.append, ar.append][n > 1000](n)

    # Detect and align arabic or english
    # By the lang whose chars are greater
    if len(en) < len(ar):
        det = '<p align="right">' + det + '</p>'
    else:
        det = '<p align="left">' + det + '</p>'

    return det

def get_seasons(series_url, base_url):
    lst = []
    html = get_egybest_html(series_url)
    a_hrefs = html_find_all(html)('a')
    for a in a_hrefs:
        if a['href'][:8] == '/season/':
            lst.append(base_url + a['href'])
    # Organize data in a dict to facilitate working with them in GUI
    dct = {
        n:  {
            'id':'season',
            'name': ' '.join(url.split('/')[-2].split('-')[-2:]).title(),
            'url':url,
            'type':''
            }   \
                # Store links reversely cause egybest stores them the opposite way
                for n, url in enumerate(lst[::-1])
            }
    return dct

def get_episodes(season_url, base_url):
    lst = []
    series_url = ''
    html = get_egybest_html(season_url)
    a_hrefs = html_find_all(html)('a')
    for a in a_hrefs:
        if a['href'][:9] == '/episode/':
            lst.append(base_url + a['href'])
        # This if block is used later in "go back" mechanism in GUI
        if a['href'][:8] == '/series/':
            series_url = base_url + a['href']
    # Organize data in a dict to facilitate working with them in GUI
    dct = {
        n:  {
            'id':'episode',
            'name': 'Episode ' + url.split('/')[-2].split('-')[-4:][-1],
            'url':url,
            'type':''
            }   \
                # Store links reversely cause egybest stores them the opposite way
                for n, url in enumerate(lst[::-1])
            }
    return dct, series_url

def _setDriverOptions(self):
    exit(0)
    global BROWSER
    self.lblStartup.setText('Getting Egy.best Static IP...')
    pgbar(self.pgbar, 0, 10, self.run)
    
    try:
        options = webdriver.ChromeOptions()
        
        # v1.6
        # more stable chrome driver settings
        ####
        chrome_prefs = {}
        chrome_prefs["profile.managed_default_content_settings.images"] = 2
        chrome_prefs["profile.default_content_settings.images"] = 2
        chrome_prefs["download.download_restrictions"] = 3
        chrome_prefs["download.prompt_for_download"] = False
        chrome_prefs["download.default_directory"] = "NUL"
        
        options.add_experimental_option("prefs", chrome_prefs)
        
        options.add_argument('--incognito')
        options.add_argument('--headless')
        options.add_argument('--log-level=OFF')
        
        options.add_experimental_option('excludeSwitches', ['enable-logging'])
        ####
        
        tmp_loc = options.binary_location
        try:
            options.binary_location = "C:\\Program Files\\Google\\Chrome\\Application\\chrome.exe"
            BROWSER = webdriver.Chrome(options=options)
        except:
            options.binary_location = tmp_loc
            BROWSER = webdriver.Chrome(options=options)

        # get working url when egy.best is down
        server_url = requests.get('https://raw.githubusercontent.com/elmoiv/egybest_server/master/egybest_url').text[:-1]

        self.lblStartup.setText('Testing Egybest connection...'); self.run()
        pgbar(self.pgbar, 10, 23, self.run)
        if requests.head(server_url).status_code != 200:
            self.error('Egy.best is down\n Use VPN or try again later.\n')
            return

        self.base_url = server_url[:-1] if server_url[-1] == '/' else server_url
    except:
        self.error()
